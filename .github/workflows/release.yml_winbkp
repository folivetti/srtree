name: srtols Release

on: 
  # Trigger the workflow on the new 'v*' tag created
  push:
    tags:
      - "v*"

jobs:
  create_release:
    name: Create Github Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

  build_artifact:
    needs: [create_release]
    name: ${{ matrix.os }}/GHC ${{ matrix.ghc }}/${{ github.ref }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        ghc:
          - 9.10.1
        cabal: ["3.14.1.1"]
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set tag name
        uses: olegtarasov/get-tag@v2.1
        id: tag
        with:
          tagRegex: "v(.*)"
          tagRegexGroup: 1

      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        id: setup-haskell-cabal
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}

      - name: Cache ~/.cabal/store
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-ghc-${{ matrix.ghc }}-${{ github.sha }}
          path: ~/.cabal/store

      - if: matrix.os == 'ubuntu-latest'
        name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnlopt-dev libnlopt0

      - if: matrix.os == 'macOS-latest'
        name: Install dependencies
        run: |
          brew install nlopt

      - if: matrix.os == 'windows-latest'
        name: Build windows binary
        run: |
          pwd
          mkdir /d/a/nlopt 
          curl -L https://github.com/stevengj/NLoptBuilder/releases/download/v2.6.1/NLopt.v2.6.1.i686-w64-mingw32.tar.gz -o nlopt.tar.gz
          tar zxvf nlopt.tar.gz -C /d/a/nlopt
          dir /d/a/nlopt
          cp /d/a/nlopt/bin/* /usr/lib
          mkdir dist
          cabal install exe:egraphGP --install-method=copy --overwrite-policy=always --installdir=dist --extra-lib-dirs=/d/a/nlopt/lib --extra-lib-dirs=/d/a/nlopt/bin --extra-include-dirs=/d/a/nlopt/include
        #  cabal install exe:egraphSearch --install-method=copy --overwrite-policy=always --installdir=dist --extra-lib-dirs=nlopt/lib --extra-lib-dirs=nlopt/bin --extra-include-dirs=nlopt/include
        #  cabal install exe:srtools --install-method=copy --overwrite-policy=always --installdir=dist --extra-lib-dirs=nlopt/lib --extra-lib-dirs=nlopt/bin --extra-include-dirs=nlopt/include
        #  cabal install exe:rEGGression --install-method=copy --overwrite-policy=always --installdir=dist --extra-lib-dirs=nlopt/lib --extra-lib-dirs=nlopt/bin --extra-include-dirs=nlopt/include
        #  cabal install exe:srsimplify --install-method=copy --overwrite-policy=always --installdir=dist --extra-lib-dirs=nlopt/lib --extra-lib-dirs=nlopt/bin --extra-include-dirs=nlopt/include
      - if: matrix.os != 'windows-latest'
        name: Build binary
        run: |
          mkdir dist
          cabal install exe:egraphGP --install-method=copy --overwrite-policy=always --installdir=dist
          cabal install exe:egraphSearch --install-method=copy --overwrite-policy=always --installdir=dist
          cabal install exe:srtools --install-method=copy --overwrite-policy=always --installdir=dist
          cabal install exe:rEGGression --install-method=copy --overwrite-policy=always --installdir=dist
          cabal install exe:srsimplify --install-method=copy --overwrite-policy=always --installdir=dist

      - if: matrix.os == 'windows-latest'
        name: Set extension to .exe on Windows
        run: echo "EXT=.exe" >> $GITHUB_ENV

      - name: Set binary path name
        run: |
          echo "BINARY_PATH1=./dist/srsimplify${{ env.EXT }}" >> $GITHUB_ENV
          echo "BINARY_PATH2=./dist/srtools${{ env.EXT }}" >> $GITHUB_ENV
          echo "BINARY_PATH2=./dist/egraphGP${{ env.EXT }}" >> $GITHUB_ENV
          echo "BINARY_PATH2=./dist/egraphSearch${{ env.EXT }}" >> $GITHUB_ENV
          echo "BINARY_PATH2=./dist/rEGGression${{ env.EXT }}" >> $GITHUB_ENV

      - name: Upload Release Asset
        id: upload-release-asset
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
             ${{ env.BINARY_PATH1 }}/srsimplify-${{ steps.tag.outputs.tag }}-${{ runner.os }}-ghc-${{ matrix.ghc }}${{ env.EXT }}
             ${{ env.BINARY_PATH2 }}/srtools-${{ steps.tag.outputs.tag }}-${{ runner.os }}-ghc-${{ matrix.ghc }}${{ env.EXT }}
             ${{ env.BINARY_PATH2 }}/egraphSearch-${{ steps.tag.outputs.tag }}-${{ runner.os }}-ghc-${{ matrix.ghc }}${{ env.EXT }}
             ${{ env.BINARY_PATH2 }}/egraphGP-${{ steps.tag.outputs.tag }}-${{ runner.os }}-ghc-${{ matrix.ghc }}${{ env.EXT }}
             ${{ env.BINARY_PATH2 }}/rEGGression-${{ steps.tag.outputs.tag }}-${{ runner.os }}-ghc-${{ matrix.ghc }}${{ env.EXT }}
